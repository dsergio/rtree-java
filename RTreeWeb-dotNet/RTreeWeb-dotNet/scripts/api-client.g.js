/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import axios from 'axios';
var RTreeClient = /** @class */ (function () {
    function RTreeClient(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "localhost:8080/";
    }
    /**
     * RTree_getAll
     * @return OK
     */
    RTreeClient.prototype.getAll = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/RTree/";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };
        return this.instance.request(options_).then(function (_response) {
            return _this.processGetAll(_response);
        });
    };
    RTreeClient.prototype.processGetAll = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [];
                for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                    var item = resultData200_1[_i];
                    result200.push(RTree.fromJS(item));
                }
            }
            return result200;
        }
        else if (status === 401) {
            var _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        }
        else if (status === 403) {
            var _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        }
        else if (status === 404) {
            var _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    /**
     * RTree_get
     * @param treeName treeName
     * @return OK
     */
    RTreeClient.prototype.get = function (treeName) {
        var _this = this;
        var url_ = this.baseUrl + "/api/RTree/{treeName}";
        if (treeName === undefined || treeName === null)
            throw new Error("The parameter 'treeName' must be defined.");
        url_ = url_.replace("{treeName}", encodeURIComponent("" + treeName));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };
        return this.instance.request(options_).then(function (_response) {
            return _this.processGet(_response);
        });
    };
    RTreeClient.prototype.processGet = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = RTree.fromJS(resultData200);
            return result200;
        }
        else if (status === 401) {
            var _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        }
        else if (status === 403) {
            var _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        }
        else if (status === 404) {
            var _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    return RTreeClient;
}());
export { RTreeClient };
var IHyperRectangle = /** @class */ (function () {
    function IHyperRectangle(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IHyperRectangle.prototype.init = function (_data) {
        if (_data) {
            if (Array.isArray(_data["dimensionArray1"])) {
                this.dimensionArray1 = [];
                for (var _i = 0, _a = _data["dimensionArray1"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.dimensionArray1.push(item);
                }
            }
            if (Array.isArray(_data["dimensionArray2"])) {
                this.dimensionArray2 = [];
                for (var _b = 0, _c = _data["dimensionArray2"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.dimensionArray2.push(item);
                }
            }
            if (_data["json"]) {
                this.json = {};
                for (var key in _data["json"]) {
                    if (_data["json"].hasOwnProperty(key))
                        this.json[key] = _data["json"][key];
                }
            }
            this.level = _data["level"];
            this.numberDimensions = _data["numberDimensions"];
            this.space = _data["space"];
        }
    };
    IHyperRectangle.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IHyperRectangle();
        result.init(data);
        return result;
    };
    IHyperRectangle.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dimensionArray1)) {
            data["dimensionArray1"] = [];
            for (var _i = 0, _a = this.dimensionArray1; _i < _a.length; _i++) {
                var item = _a[_i];
                data["dimensionArray1"].push(item);
            }
        }
        if (Array.isArray(this.dimensionArray2)) {
            data["dimensionArray2"] = [];
            for (var _b = 0, _c = this.dimensionArray2; _b < _c.length; _b++) {
                var item = _c[_b];
                data["dimensionArray2"].push(item);
            }
        }
        if (this.json) {
            data["json"] = {};
            for (var key in this.json) {
                if (this.json.hasOwnProperty(key))
                    data["json"][key] = this.json[key];
            }
        }
        data["level"] = this.level;
        data["numberDimensions"] = this.numberDimensions;
        data["space"] = this.space;
        return data;
    };
    return IHyperRectangle;
}());
export { IHyperRectangle };
var ILocationItem = /** @class */ (function () {
    function ILocationItem(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ILocationItem.prototype.init = function (_data) {
        if (_data) {
            if (Array.isArray(_data["dimensionArray"])) {
                this.dimensionArray = [];
                for (var _i = 0, _a = _data["dimensionArray"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.dimensionArray.push(item);
                }
            }
            this.id = _data["id"];
            if (_data["json"]) {
                this.json = {};
                for (var key in _data["json"]) {
                    if (_data["json"].hasOwnProperty(key))
                        this.json[key] = _data["json"][key];
                }
            }
            if (_data["locationJson"]) {
                this.locationJson = {};
                for (var key in _data["locationJson"]) {
                    if (_data["locationJson"].hasOwnProperty(key))
                        this.locationJson[key] = _data["locationJson"][key];
                }
            }
            this.numberDimensions = _data["numberDimensions"];
            this.type = _data["type"];
        }
    };
    ILocationItem.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ILocationItem();
        result.init(data);
        return result;
    };
    ILocationItem.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dimensionArray)) {
            data["dimensionArray"] = [];
            for (var _i = 0, _a = this.dimensionArray; _i < _a.length; _i++) {
                var item = _a[_i];
                data["dimensionArray"].push(item);
            }
        }
        data["id"] = this.id;
        if (this.json) {
            data["json"] = {};
            for (var key in this.json) {
                if (this.json.hasOwnProperty(key))
                    data["json"][key] = this.json[key];
            }
        }
        if (this.locationJson) {
            data["locationJson"] = {};
            for (var key in this.locationJson) {
                if (this.locationJson.hasOwnProperty(key))
                    data["locationJson"][key] = this.locationJson[key];
            }
        }
        data["numberDimensions"] = this.numberDimensions;
        data["type"] = this.type;
        return data;
    };
    return ILocationItem;
}());
export { ILocationItem };
var RTree = /** @class */ (function () {
    function RTree(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RTree.prototype.init = function (_data) {
        if (_data) {
            this.name = _data["name"];
            this.numDimensions = _data["numDimensions"];
            if (Array.isArray(_data["points"])) {
                this.points = [];
                for (var _i = 0, _a = _data["points"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.points.push(ILocationItem.fromJS(item));
                }
            }
            if (Array.isArray(_data["rectangles"])) {
                this.rectangles = [];
                for (var _b = 0, _c = _data["rectangles"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.rectangles.push(IHyperRectangle.fromJS(item));
                }
            }
        }
    };
    RTree.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RTree();
        result.init(data);
        return result;
    };
    RTree.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["numDimensions"] = this.numDimensions;
        if (Array.isArray(this.points)) {
            data["points"] = [];
            for (var _i = 0, _a = this.points; _i < _a.length; _i++) {
                var item = _a[_i];
                data["points"].push(item.toJSON());
            }
        }
        if (Array.isArray(this.rectangles)) {
            data["rectangles"] = [];
            for (var _b = 0, _c = this.rectangles; _b < _c.length; _b++) {
                var item = _c[_b];
                data["rectangles"].push(item.toJSON());
            }
        }
        return data;
    };
    return RTree;
}());
export { RTree };
var ApiException = /** @class */ (function (_super) {
    __extends(ApiException, _super);
    function ApiException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isApiException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    ApiException.isApiException = function (obj) {
        return obj.isApiException === true;
    };
    return ApiException;
}(Error));
export { ApiException };
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
//# sourceMappingURL=api-client.g.js.map
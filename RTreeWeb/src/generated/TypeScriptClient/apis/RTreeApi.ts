/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ILocationItem,
  LocationItem,
  RTree,
  RTreeCreate,
  SearchRectangle,
} from '../models/index';
import {
    ILocationItemFromJSON,
    ILocationItemToJSON,
    LocationItemFromJSON,
    LocationItemToJSON,
    RTreeFromJSON,
    RTreeToJSON,
    RTreeCreateFromJSON,
    RTreeCreateToJSON,
    SearchRectangleFromJSON,
    SearchRectangleToJSON,
} from '../models/index';

export interface RTreeGetRequest {
    treeName: string;
}

export interface RTreeInsertRequest {
    treeName: string;
    item: LocationItem;
}

export interface RTreeNewTreeRequest {
    rtreeCreate: RTreeCreate;
}

export interface RTreeSearchRequest {
    treeName: string;
    searchRectangle: SearchRectangle;
}

/**
 * 
 */
export class RTreeApi extends runtime.BaseAPI {

    /**
     * Get RTree structure by treeName
     * RTree_get
     */
    async rTreeGetRaw(requestParameters: RTreeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTree>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/RTree/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeFromJSON(jsonValue));
    }

    /**
     * Get RTree structure by treeName
     * RTree_get
     */
    async rTreeGet(requestParameters: RTreeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTree> {
        const response = await this.rTreeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all RTree structures from metadata
     * RTree_getAll
     */
    async rTreeGetAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RTree>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/RTree/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RTreeFromJSON));
    }

    /**
     * Get all RTree structures from metadata
     * RTree_getAll
     */
    async rTreeGetAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RTree>> {
        const response = await this.rTreeGetAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Insert into RTree
     * RTree_insert
     */
    async rTreeInsertRaw(requestParameters: RTreeInsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTree>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeInsert().'
            );
        }

        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling rTreeInsert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTree/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationItemToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeFromJSON(jsonValue));
    }

    /**
     * Insert into RTree
     * RTree_insert
     */
    async rTreeInsert(requestParameters: RTreeInsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTree | null | undefined > {
        const response = await this.rTreeInsertRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 201:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Create new RTree
     * RTree_newTree
     */
    async rTreeNewTreeRaw(requestParameters: RTreeNewTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTree>> {
        if (requestParameters['rtreeCreate'] == null) {
            throw new runtime.RequiredError(
                'rtreeCreate',
                'Required parameter "rtreeCreate" was null or undefined when calling rTreeNewTree().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTree/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RTreeCreateToJSON(requestParameters['rtreeCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeFromJSON(jsonValue));
    }

    /**
     * Create new RTree
     * RTree_newTree
     */
    async rTreeNewTree(requestParameters: RTreeNewTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTree | null | undefined > {
        const response = await this.rTreeNewTreeRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 201:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Search RTree structure by rectangle
     * RTree_search
     */
    async rTreeSearchRaw(requestParameters: RTreeSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<ILocationItem>; }>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeSearch().'
            );
        }

        if (requestParameters['searchRectangle'] == null) {
            throw new runtime.RequiredError(
                'searchRectangle',
                'Required parameter "searchRectangle" was null or undefined when calling rTreeSearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTree/search/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRectangleToJSON(requestParameters['searchRectangle']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Search RTree structure by rectangle
     * RTree_search
     */
    async rTreeSearch(requestParameters: RTreeSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<ILocationItem>; } | null | undefined > {
        const response = await this.rTreeSearchRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 201:
                return null;
            default:
                return await response.value();
        }
    }

}

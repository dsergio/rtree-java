/* tslint:disable */
/* eslint-disable */
/**
 * RTree API
 * Documentation of RTree API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LocationItemDouble,
  RTreeCreate,
  RTreeDouble,
  RectangleDouble,
} from '../models/index';
import {
    LocationItemDoubleFromJSON,
    LocationItemDoubleToJSON,
    RTreeCreateFromJSON,
    RTreeCreateToJSON,
    RTreeDoubleFromJSON,
    RTreeDoubleToJSON,
    RectangleDoubleFromJSON,
    RectangleDoubleToJSON,
} from '../models/index';

export interface RTreeDoubleDeleteRequest {
    treeName: string;
}

export interface RTreeDoubleGetRequest {
    treeName: string;
}

export interface RTreeDoubleInsertRequest {
    treeName: string;
    locationItemDouble: LocationItemDouble;
}

export interface RTreeDoubleInsertGeoRequest {
    treeName: string;
    locationItemDouble: LocationItemDouble;
}

export interface RTreeDoubleNewTreeRequest {
    rTreeCreate: RTreeCreate;
}

export interface RTreeDoubleSearchRequest {
    treeName: string;
    rectangleDouble: RectangleDouble;
}

/**
 * 
 */
export class RTreeDoubleApi extends runtime.BaseAPI {

    /**
     * Delete RTree<Double> by treeName
     * RTreeDouble_delete
     */
    async rTreeDoubleDeleteRaw(requestParameters: RTreeDoubleDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeDoubleDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/RTreeDouble/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete RTree<Double> by treeName
     * RTreeDouble_delete
     */
    async rTreeDoubleDelete(requestParameters: RTreeDoubleDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.rTreeDoubleDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get RTree<Double> structure and data by treeName
     * RTreeDouble_get
     */
    async rTreeDoubleGetRaw(requestParameters: RTreeDoubleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTreeDouble>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeDoubleGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/RTreeDouble/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeDoubleFromJSON(jsonValue));
    }

    /**
     * Get RTree<Double> structure and data by treeName
     * RTreeDouble_get
     */
    async rTreeDoubleGet(requestParameters: RTreeDoubleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTreeDouble> {
        const response = await this.rTreeDoubleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all RTree<Double> structures from metadata
     * RTreeDouble_getAll
     */
    async rTreeDoubleGetAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RTreeDouble>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/RTreeDouble/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RTreeDoubleFromJSON));
    }

    /**
     * Get all RTree<Double> structures from metadata
     * RTreeDouble_getAll
     */
    async rTreeDoubleGetAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RTreeDouble>> {
        const response = await this.rTreeDoubleGetAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Insert a new item into RTree<Double>
     * RTreeDouble_insert
     */
    async rTreeDoubleInsertRaw(requestParameters: RTreeDoubleInsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTreeDouble>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeDoubleInsert().'
            );
        }

        if (requestParameters['locationItemDouble'] == null) {
            throw new runtime.RequiredError(
                'locationItemDouble',
                'Required parameter "locationItemDouble" was null or undefined when calling rTreeDoubleInsert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTreeDouble/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationItemDoubleToJSON(requestParameters['locationItemDouble']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeDoubleFromJSON(jsonValue));
    }

    /**
     * Insert a new item into RTree<Double>
     * RTreeDouble_insert
     */
    async rTreeDoubleInsert(requestParameters: RTreeDoubleInsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTreeDouble> {
        const response = await this.rTreeDoubleInsertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert a new geo into RTree<Double>
     * RTreeDouble_insert_geo
     */
    async rTreeDoubleInsertGeoRaw(requestParameters: RTreeDoubleInsertGeoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTreeDouble>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeDoubleInsertGeo().'
            );
        }

        if (requestParameters['locationItemDouble'] == null) {
            throw new runtime.RequiredError(
                'locationItemDouble',
                'Required parameter "locationItemDouble" was null or undefined when calling rTreeDoubleInsertGeo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTreeDouble/{treeName}/geo/`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationItemDoubleToJSON(requestParameters['locationItemDouble']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeDoubleFromJSON(jsonValue));
    }

    /**
     * Insert a new geo into RTree<Double>
     * RTreeDouble_insert_geo
     */
    async rTreeDoubleInsertGeo(requestParameters: RTreeDoubleInsertGeoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTreeDouble> {
        const response = await this.rTreeDoubleInsertGeoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new RTree<Double>
     * RTreeDouble_newTree
     */
    async rTreeDoubleNewTreeRaw(requestParameters: RTreeDoubleNewTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTreeDouble>> {
        if (requestParameters['rTreeCreate'] == null) {
            throw new runtime.RequiredError(
                'rTreeCreate',
                'Required parameter "rTreeCreate" was null or undefined when calling rTreeDoubleNewTree().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTreeDouble/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RTreeCreateToJSON(requestParameters['rTreeCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeDoubleFromJSON(jsonValue));
    }

    /**
     * Create new RTree<Double>
     * RTreeDouble_newTree
     */
    async rTreeDoubleNewTree(requestParameters: RTreeDoubleNewTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTreeDouble> {
        const response = await this.rTreeDoubleNewTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search RTree<Double> structure by rectangle
     * RTreeDouble_search
     */
    async rTreeDoubleSearchRaw(requestParameters: RTreeDoubleSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationItemDouble>>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeDoubleSearch().'
            );
        }

        if (requestParameters['rectangleDouble'] == null) {
            throw new runtime.RequiredError(
                'rectangleDouble',
                'Required parameter "rectangleDouble" was null or undefined when calling rTreeDoubleSearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTreeDouble/search/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RectangleDoubleToJSON(requestParameters['rectangleDouble']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationItemDoubleFromJSON));
    }

    /**
     * Search RTree<Double> structure by rectangle
     * RTreeDouble_search
     */
    async rTreeDoubleSearch(requestParameters: RTreeDoubleSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationItemDouble>> {
        const response = await this.rTreeDoubleSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * RTree API
 * Documentation of RTree API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LocationItemInteger,
  RTreeCreate,
  RTreeInteger,
  RectangleInteger,
} from '../models/index';
import {
    LocationItemIntegerFromJSON,
    LocationItemIntegerToJSON,
    RTreeCreateFromJSON,
    RTreeCreateToJSON,
    RTreeIntegerFromJSON,
    RTreeIntegerToJSON,
    RectangleIntegerFromJSON,
    RectangleIntegerToJSON,
} from '../models/index';

export interface RTreeIntegerGetRequest {
    treeName: string;
}

export interface RTreeIntegerInsertRequest {
    treeName: string;
    locationItemInteger: LocationItemInteger;
}

export interface RTreeIntegerNewTreeRequest {
    rTreeCreate: RTreeCreate;
}

export interface RTreeIntegerSearchRequest {
    treeName: string;
    rectangleInteger: RectangleInteger;
}

/**
 * 
 */
export class RTreeIntegerApi extends runtime.BaseAPI {

    /**
     * Get RTree<Integer> structure and data by treeName
     * RTreeInteger_get
     */
    async rTreeIntegerGetRaw(requestParameters: RTreeIntegerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTreeInteger>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeIntegerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/RTreeInteger/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeIntegerFromJSON(jsonValue));
    }

    /**
     * Get RTree<Integer> structure and data by treeName
     * RTreeInteger_get
     */
    async rTreeIntegerGet(requestParameters: RTreeIntegerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTreeInteger> {
        const response = await this.rTreeIntegerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all RTree<Integer> structures from metadata
     * RTreeInteger_getAll
     */
    async rTreeIntegerGetAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RTreeInteger>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/RTreeInteger/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RTreeIntegerFromJSON));
    }

    /**
     * Get all RTree<Integer> structures from metadata
     * RTreeInteger_getAll
     */
    async rTreeIntegerGetAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RTreeInteger>> {
        const response = await this.rTreeIntegerGetAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Insert into RTree<Integer>
     * RTreeInteger_insert
     */
    async rTreeIntegerInsertRaw(requestParameters: RTreeIntegerInsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTreeInteger>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeIntegerInsert().'
            );
        }

        if (requestParameters['locationItemInteger'] == null) {
            throw new runtime.RequiredError(
                'locationItemInteger',
                'Required parameter "locationItemInteger" was null or undefined when calling rTreeIntegerInsert().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTreeInteger/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationItemIntegerToJSON(requestParameters['locationItemInteger']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeIntegerFromJSON(jsonValue));
    }

    /**
     * Insert into RTree<Integer>
     * RTreeInteger_insert
     */
    async rTreeIntegerInsert(requestParameters: RTreeIntegerInsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTreeInteger> {
        const response = await this.rTreeIntegerInsertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new RTree<Integer>
     * RTreeInteger_newTree
     */
    async rTreeIntegerNewTreeRaw(requestParameters: RTreeIntegerNewTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RTreeInteger>> {
        if (requestParameters['rTreeCreate'] == null) {
            throw new runtime.RequiredError(
                'rTreeCreate',
                'Required parameter "rTreeCreate" was null or undefined when calling rTreeIntegerNewTree().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTreeInteger/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RTreeCreateToJSON(requestParameters['rTreeCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RTreeIntegerFromJSON(jsonValue));
    }

    /**
     * Create new RTree<Integer>
     * RTreeInteger_newTree
     */
    async rTreeIntegerNewTree(requestParameters: RTreeIntegerNewTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RTreeInteger> {
        const response = await this.rTreeIntegerNewTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search RTree<Integer> structure by rectangle
     * RTreeInteger_search
     */
    async rTreeIntegerSearchRaw(requestParameters: RTreeIntegerSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<LocationItemInteger>; }>> {
        if (requestParameters['treeName'] == null) {
            throw new runtime.RequiredError(
                'treeName',
                'Required parameter "treeName" was null or undefined when calling rTreeIntegerSearch().'
            );
        }

        if (requestParameters['rectangleInteger'] == null) {
            throw new runtime.RequiredError(
                'rectangleInteger',
                'Required parameter "rectangleInteger" was null or undefined when calling rTreeIntegerSearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/RTreeInteger/search/{treeName}`;
        urlPath = urlPath.replace(`{${"treeName"}}`, encodeURIComponent(String(requestParameters['treeName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RectangleIntegerToJSON(requestParameters['rectangleInteger']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Search RTree<Integer> structure by rectangle
     * RTreeInteger_search
     */
    async rTreeIntegerSearch(requestParameters: RTreeIntegerSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<LocationItemInteger>; }> {
        const response = await this.rTreeIntegerSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocationItemInteger } from './LocationItemInteger';
import {
    LocationItemIntegerFromJSON,
    LocationItemIntegerFromJSONTyped,
    LocationItemIntegerToJSON,
    LocationItemIntegerToJSONTyped,
} from './LocationItemInteger';
import type { RectangleInteger } from './RectangleInteger';
import {
    RectangleIntegerFromJSON,
    RectangleIntegerFromJSONTyped,
    RectangleIntegerToJSON,
    RectangleIntegerToJSONTyped,
} from './RectangleInteger';

/**
 * 
 * @export
 * @interface RTreeInteger
 */
export interface RTreeInteger {
    /**
     * 
     * @type {string}
     * @memberof RTreeInteger
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof RTreeInteger
     */
    numDimensions?: number;
    /**
     * 
     * @type {Array<LocationItemInteger>}
     * @memberof RTreeInteger
     */
    points?: Array<LocationItemInteger>;
    /**
     * 
     * @type {Array<RectangleInteger>}
     * @memberof RTreeInteger
     */
    rectangles?: Array<RectangleInteger>;
}

/**
 * Check if a given object implements the RTreeInteger interface.
 */
export function instanceOfRTreeInteger(value: object): value is RTreeInteger {
    return true;
}

export function RTreeIntegerFromJSON(json: any): RTreeInteger {
    return RTreeIntegerFromJSONTyped(json, false);
}

export function RTreeIntegerFromJSONTyped(json: any, ignoreDiscriminator: boolean): RTreeInteger {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'numDimensions': json['numDimensions'] == null ? undefined : json['numDimensions'],
        'points': json['points'] == null ? undefined : ((json['points'] as Array<any>).map(LocationItemIntegerFromJSON)),
        'rectangles': json['rectangles'] == null ? undefined : ((json['rectangles'] as Array<any>).map(RectangleIntegerFromJSON)),
    };
}

export function RTreeIntegerToJSON(json: any): RTreeInteger {
    return RTreeIntegerToJSONTyped(json, false);
}

export function RTreeIntegerToJSONTyped(value?: RTreeInteger | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'numDimensions': value['numDimensions'],
        'points': value['points'] == null ? undefined : ((value['points'] as Array<any>).map(LocationItemIntegerToJSON)),
        'rectangles': value['rectangles'] == null ? undefined : ((value['rectangles'] as Array<any>).map(RectangleIntegerToJSON)),
    };
}


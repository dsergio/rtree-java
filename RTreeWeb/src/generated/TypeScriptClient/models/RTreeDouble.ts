/* tslint:disable */
/* eslint-disable */
/**
 * RTree API
 * Documentation of RTree API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocationItemDouble } from './LocationItemDouble';
import {
    LocationItemDoubleFromJSON,
    LocationItemDoubleFromJSONTyped,
    LocationItemDoubleToJSON,
    LocationItemDoubleToJSONTyped,
} from './LocationItemDouble';
import type { RectangleDouble } from './RectangleDouble';
import {
    RectangleDoubleFromJSON,
    RectangleDoubleFromJSONTyped,
    RectangleDoubleToJSON,
    RectangleDoubleToJSONTyped,
} from './RectangleDouble';

/**
 * 
 * @export
 * @interface RTreeDouble
 */
export interface RTreeDouble {
    /**
     * 
     * @type {string}
     * @memberof RTreeDouble
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof RTreeDouble
     */
    numDimensions?: number;
    /**
     * 
     * @type {Array<RectangleDouble>}
     * @memberof RTreeDouble
     */
    rectangles?: Array<RectangleDouble>;
    /**
     * 
     * @type {Array<LocationItemDouble>}
     * @memberof RTreeDouble
     */
    points?: Array<LocationItemDouble>;
}

/**
 * Check if a given object implements the RTreeDouble interface.
 */
export function instanceOfRTreeDouble(value: object): value is RTreeDouble {
    return true;
}

export function RTreeDoubleFromJSON(json: any): RTreeDouble {
    return RTreeDoubleFromJSONTyped(json, false);
}

export function RTreeDoubleFromJSONTyped(json: any, ignoreDiscriminator: boolean): RTreeDouble {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'numDimensions': json['numDimensions'] == null ? undefined : json['numDimensions'],
        'rectangles': json['rectangles'] == null ? undefined : ((json['rectangles'] as Array<any>).map(RectangleDoubleFromJSON)),
        'points': json['points'] == null ? undefined : ((json['points'] as Array<any>).map(LocationItemDoubleFromJSON)),
    };
}

export function RTreeDoubleToJSON(json: any): RTreeDouble {
    return RTreeDoubleToJSONTyped(json, false);
}

export function RTreeDoubleToJSONTyped(value?: RTreeDouble | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'numDimensions': value['numDimensions'],
        'rectangles': value['rectangles'] == null ? undefined : ((value['rectangles'] as Array<any>).map(RectangleDoubleToJSON)),
        'points': value['points'] == null ? undefined : ((value['points'] as Array<any>).map(LocationItemDoubleToJSON)),
    };
}


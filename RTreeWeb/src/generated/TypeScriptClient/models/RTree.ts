/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IHyperRectangle } from './IHyperRectangle';
import {
    IHyperRectangleFromJSON,
    IHyperRectangleFromJSONTyped,
    IHyperRectangleToJSON,
    IHyperRectangleToJSONTyped,
} from './IHyperRectangle';
import type { ILocationItem } from './ILocationItem';
import {
    ILocationItemFromJSON,
    ILocationItemFromJSONTyped,
    ILocationItemToJSON,
    ILocationItemToJSONTyped,
} from './ILocationItem';

/**
 * 
 * @export
 * @interface RTree
 */
export interface RTree {
    /**
     * 
     * @type {string}
     * @memberof RTree
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof RTree
     */
    numDimensions?: number;
    /**
     * 
     * @type {Array<ILocationItem>}
     * @memberof RTree
     */
    points?: Array<ILocationItem>;
    /**
     * 
     * @type {Array<IHyperRectangle>}
     * @memberof RTree
     */
    rectangles?: Array<IHyperRectangle>;
}

/**
 * Check if a given object implements the RTree interface.
 */
export function instanceOfRTree(value: object): value is RTree {
    return true;
}

export function RTreeFromJSON(json: any): RTree {
    return RTreeFromJSONTyped(json, false);
}

export function RTreeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RTree {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'numDimensions': json['numDimensions'] == null ? undefined : json['numDimensions'],
        'points': json['points'] == null ? undefined : ((json['points'] as Array<any>).map(ILocationItemFromJSON)),
        'rectangles': json['rectangles'] == null ? undefined : ((json['rectangles'] as Array<any>).map(IHyperRectangleFromJSON)),
    };
}

export function RTreeToJSON(json: any): RTree {
    return RTreeToJSONTyped(json, false);
}

export function RTreeToJSONTyped(value?: RTree | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'numDimensions': value['numDimensions'],
        'points': value['points'] == null ? undefined : ((value['points'] as Array<any>).map(ILocationItemToJSON)),
        'rectangles': value['rectangles'] == null ? undefined : ((value['rectangles'] as Array<any>).map(IHyperRectangleToJSON)),
    };
}

